// Generated by CoffeeScript 1.3.3

/*
  Prison.js
  Copyright(c) 2012 Troy Whiteley <troy@somanyscientists.com>
  Released under the MIT License.
*/


(function() {
  var Prison;

  Prison = function() {
    this.lockedDown = false;
    return this;
  };

  Prison.prototype._scroll = function(event) {
    event.preventDefault();
  };

  Prison.prototype._keydown = function(event) {
    var key, keys, _i, _len;
    keys = [37, 38, 39, 40, 32, 33, 34, 35, 36];
    for (_i = 0, _len = keys.length; _i < _len; _i++) {
      key = keys[_i];
      if (key === event.keyCode) {
        event.preventDefault();
      }
    }
  };

  Prison.prototype.enable = function() {
    var link, links, _i, _len;
    if (this.lockedDown) {
      return this.lockedDown;
    }
    this.lockedDown = true;
    if (window.addEventListener) {
      window.addEventListener('DOMMouseScroll', this._scroll, false);
    }
    this.originalScrollEvent = document.onmousewheel || window.onmousewheel;
    this.originalKeyEvent = document.onkeydown;
    window.onmousewheel = document.onmousewheel = this._scroll;
    document.onkeydown = this._keydown;
    links = document.getElementsByTagName('a');
    for (_i = 0, _len = links.length; _i < _len; _i++) {
      link = links[_i];
      link.setAttribute('data-original-tabIndex', link.getAttribute('tabIndex'));
      link.setAttribute('tabIndex', -1);
    }
    return this.lockedDown;
  };

  Prison.prototype.disable = function() {
    var link, links, _i, _len;
    if (!this.lockedDown) {
      return this.lockedDown;
    }
    this.lockedDown = false;
    if (window.removeEventListener) {
      window.removeEventListener('DOMMouseScroll', this._scroll, false);
    }
    window.onmousewheel = document.onmousewheel = this.originalScrollEvent;
    document.onkeydown = this.originalKeyEvent;
    links = document.getElementsByTagName('a');
    for (_i = 0, _len = links.length; _i < _len; _i++) {
      link = links[_i];
      link.setAttribute('tabIndex', link.getAttribute('tabIndex'));
    }
    return this.lockedDown;
  };

  Prison.prototype.getStatus = function() {
    return this.lockedDown;
  };

  this.Prison = new Prison();

}).call(this);
