// Generated by CoffeeScript 1.3.3

/*
  Prison.js
  Copyright(c) 2012 Troy Whiteley <troy@somanyscientists.com>
  Released under the MIT License.

  Allows you to lock your users down so they can't scroll.
  Very useful for modals or any other interactive module
  that has it's own built in scrolling.

  Patches may be submitted in either coffeescript or javascript.
  If your patch is in javascript, it will be converted for you.

  Please post any issues to:
    https://github.com/dawnerd/Prison/issues
*/


(function() {
  var Prison, root;

  Prison = function() {
    this.lockedDown = false;
    return this;
  };

  Prison.prototype._scroll = function(event) {
    event.preventDefault();
  };

  Prison.prototype._keydown = function(event) {
    var key, keys, _i, _len;
    keys = [37, 38, 39, 40, 32, 33, 34, 35, 36];
    for (_i = 0, _len = keys.length; _i < _len; _i++) {
      key = keys[_i];
      if (key === event.keyCode) {
        event.preventDefault();
      }
    }
  };

  Prison.prototype.enable = function() {
    if (this.lockedDown) {
      return this.lockedDown;
    }
    this.lockedDown = true;
    if (window.addEventListener) {
      window.addEventListener('DOMMouseScroll', this._scroll, false);
    }
    this.originalScrollEvent = document.onmousewheel || window.onmousewheel;
    this.originalKeyEvent = document.onkeydown;
    window.onmousewheel = document.onmousewheel = this._scroll;
    document.onkeydown = this._keydown;
    return this.lockedDown;
  };

  Prison.prototype.disable = function() {
    if (!this.lockedDown) {
      return this.lockedDown;
    }
    this.lockedDown = false;
    if (window.removeEventListener) {
      window.removeEventListener('DOMMouseScroll', this._scroll, false);
    }
    window.onmousewheel = document.onmousewheel = this.originalScrollEvent;
    document.onkeydown = this.originalKeyEvent;
    return this.lockedDown;
  };

  Prison.prototype.getStatus = function() {
    return this.lockedDown;
  };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.Prison = new Prison();

}).call(this);
